"""Measure the wall time of fixedpoint estimation via differnet methods."""import jax.numpy as jnpimport jaximport timeimport pickleimport osfrom fpx import fpximport argparsedef main():    args = parse_args()    results = run_experiment(args)    dirname = str(__file__)    dirname = dirname.replace("experiments", "results")    dirname = dirname.replace(".py", "")    os.makedirs(dirname, exist_ok=True)    filename = f"{dirname}/n{args.num_steps}_d{args.num_dims}.pkl"    with open(filename, "wb") as f:        pickle.dump(results, f)    print(f"Saved results to {filename}.")def parse_args():    parser = argparse.ArgumentParser()    parser.add_argument("--num_runs", type=int, default=3)    parser.add_argument("--num_dims", type=int, default=2)    parser.add_argument("--num_steps", type=int, default=1000)    parser.add_argument("--seed", type=int, default=1)    return parser.parse_args()def run_experiment(args):    key = jax.random.PRNGKey(args.seed)    # Set up a test problem    impl = fpx.impl_cholesky_based()    ts = jnp.linspace(0, 1, num=args.num_steps)    ssm = fpx.ssm_car_tracking_velocity(        ts, noise=1e-4, diffusion=1.0, impl=impl, dim=args.num_dims    )    sample = fpx.compute_stats_sample(impl=impl)    data = sample_data(key, ssm=ssm, sample=sample)    assert not jnp.any(jnp.isnan(data))    results = {}    for impl in [fpx.impl_covariance_based(), fpx.impl_cholesky_based()]:        print()        print(impl.name)        print(f"{'-'*len(impl.name)}")        results[impl.name] = {}        # Set up an SSM        ts = jnp.linspace(0, 1, num=args.num_steps)        ssm = fpx.ssm_car_tracking_velocity(            ts, noise=1e-4, diffusion=1.0, impl=impl, dim=args.num_dims        )        # Compute a reference solution        estimate = jax.jit(fpx.compute_fixedpoint(impl=impl))        ref, _ = estimate(data, ssm)        for name, estimate in [            ("Via filter", fpx.compute_fixedpoint_via_filter(impl=impl)),            ("Via fixed-interval", fpx.compute_fixedpoint_via_fixedinterval(impl=impl)),            ("Via recursion", fpx.compute_fixedpoint(impl=impl)),        ]:            print(f"Fixedpoint via {name}")            estimate = jax.jit(estimate)            t = benchmark(estimate, ref=ref, ssm=ssm, data=data, num_runs=args.num_runs)            print(f"\t {min(t):.1e}")            results[impl.name][name] = min(t)    print()    return resultsdef sample_data(key, *, ssm, sample):    (latent, data) = sample(key, ssm)    return datadef benchmark(fixedpoint, *, ref, data, ssm, num_runs):    # Execute once to pre-compile (and to compute errors)    initial_rts, _ = fixedpoint(data, ssm)    if jnp.any(jnp.isnan(initial_rts.mean)):        print("NaN detected")        return [-1.0]    # If the values don't match, abort    rmse = root_mean_square_error(initial_rts.mean, ref.mean)    if rmse > 1e-2:        print(f"Values do not match the reference: rmse={rmse:.1e}")        return [-1.0]    ts = []    for _ in range(num_runs):        t0 = time.perf_counter()        initial_rts, _ = fixedpoint(data, ssm)        initial_rts.mean.block_until_ready()        t1 = time.perf_counter()        ts.append(t1 - t0)    return tsdef root_mean_square_error(a, b):    error_abs = jnp.abs(a - b)    return jnp.linalg.norm(error_abs / (1e-3 + jnp.abs(b))) / jnp.sqrt(b.size)if __name__ == "__main__":    main()